#
# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE file in the project.
#
scalar Long

#
# An auth directive for protecting data within an organization.
#
# Required arguments on decorated schema item: 'orgId'
#
directive @orgAuth(requires: RoleType = USER) on OBJECT | FIELD_DEFINITION
directive @auth on OBJECT | FIELD_DEFINITION

type Query {
	#
	# Retrieve a list of organizations
	#
	organizations(offset: Int, limit: Int): [Organization!]! @auth

	#
	# Retrieve an organization by ID
	#
	organization(orgId: String!): Organization @auth

	#
	# Retrieve a User by ID
	#
	user(userId: String!): User @auth

	#
	# Retrieve a contact by ID
	#
	contact(contactId: String!): Contact @auth

	#
	# Retrieve a single engagement by ID
	#
	engagement(id: String!): Engagement @auth

	engagements(
		orgId: String!
		offset: Int
		limit: Int
		userId: String
		exclude_userId: Boolean
	): [Engagement] @auth
}

type Mutation {
	#
	# Authenticate a user
	#
	authenticate(username: String!, password: String!): AuthenticationResponse!

	#
	# Assign an Engagement
	#
	assignEngagement(id: String!, userId: String!): EngagementResponse @auth

	#
	# Set engagement status
	#
	setEngagementStatus(
		id: String!
		status: EngagementStatus!
	): EngagementResponse @auth
}

#
# An Engagement Response
#
type EngagementResponse {
	#
	# The user that has been authenticated; possibly null
	#
	engagement: Engagement

	#
	# An error or status message regarding the authentication attempt
	#
	message: String!
}

#
# An Authentication Response
#
type AuthenticationResponse {
	#
	# The user that has been authenticated; possibly null
	#
	user: User

	#
	# An error or status message regarding the authentication attempt
	#
	message: String

	#
	# The user access token
	#
	accessToken: String
}

#
# A Community-Based Organization
#
type Organization {
	#
	# A unique identifier for the organization
	#
	id: String!

	#
	# The organization Name
	#
	name: String!

	#
	# A brief description of the organization and its mission
	#
	description: String!

	#
	# Users working with the organization
	#
	users: [User!]! @orgAuth(requires: VIEWER)

	#
	# Tags available to the organization
	#
	tags: [Tag]
}

#
# A label to group engagements and actions
#
type Tag {
	#
	# A unique id for the tag
	#
	id: String

	#
	# An object containing translated labels for the tag
	#
	label: String
}

#
# An object that contains translations of a string
#
# type TranslateString {
#	en_us: String
#	ko_kr: String
#	vi_vn: String
#	zh_cn: String
#	es_us: String
#	de_de: String
#	es_es: String
#	fi_fi: String
#	fr_fr: String
#	he_il: String
#	it_it: String
#	ja_jp: String
#	pt_pt: String
#	sv_se: String
#	th_th: String
# }

#
# A specialist who can provide services for clients of a CBO
#
type User {
	#
	# A unique identifier for the specialist
	#
	id: String!

	#
	# A name for a person
	#
	name: Name!

	#
	# A user name for a person
	#
	userName: String!

	#
	# The roles this user has in the system
	#
	roles: [Role!]!

	#
	# The description of this user has in the system
	#
	description: String

	#
	# Additional information this user has in the system
	#
	additionalInfo: String

	#
	# The address of this user has in the system
	#
	address: Address

	#
	# The user email
	#
	email: String

	#
	# The user phone
	#
	phone: String
}

type Role {
	#
	# The kind of role the user has
	#
	roleType: RoleType!

	#
	# The organization the role relates to
	#
	orgId: String!
}

enum RoleType {
	USER
	ADMIN
	VIEWER
}

type Address {
	#
	# Street address
	#
	street: String!

	#
	# Street address line 2
	#
	unit: String

	#
	# City
	#
	city: String

	#
	# State
	#
	state: String

	#
	# The organization the role relates to
	#
	zip: String!
}

#
# A person coming into the system who is in need of assistance or resources
#
type Contact {
	#
	# A unique identifier for a contact
	#
	id: String!

	#
	# The contact name
	#
	name: Name!

	#
	# The contact email
	#
	email: String

	#
	# The contact phone
	#
	phone: String

	#
	# The contact address
	#
	address: Address

	#
	# The date of birth
	#
	dateOfBirth: String

	#
	# Engagements this contact has made with Orgs
	#
	engagements(orgId: String): [Engagement!]!
}

#
# Engagement Status
#
enum EngagementStatus {
	NOT_STARTED
	OPEN
	CLOSED
	PENDING
	ASSIGNED
	IN_PROGRESS
}

#
# A contact's engagement with a CBO
#
type Engagement {
	#
	# ID of the engagement
	#
	id: String!

	#
	# The ID of the organization being engaged
	#
	orgId: String!

	#
	# The assigned specialist. Undefined if not the engagment is not assigned
	#
	user: User

	#
	# The start date of the engagement
	#
	startDate: String!

	#
	# The end date of the engagement
	#
	endDate: String

	#
	# Engagement Actions
	#
	actions: [Action!]!

	#
	# Engagement Status
	#
	status: EngagementStatus!

	#
	# Engagement Contact
	#
	contact: Contact!

	#
	# Engagement Description
	#
	description: String

	#
	# Tags applied to the engagement
	#
	tags: [Tag]
}

type Action {
	user: User!

	#
	# The id of the organization engaging the contact
	#
	orgId: String!

	#
	# The date the action was taken
	#
	date: String!

	#
	# A comment entered by the specialist
	#
	comment: String!

	#
	# Tags applied to the action
	#
	tags: [Tag]
}

#
# A name for a person
#
type Name {
	#
	# A person's first name
	#
	first: String!
	#
	# A person's last name
	#
	last: String!
	#
	# A person's middle name
	#
	middle: String
}
