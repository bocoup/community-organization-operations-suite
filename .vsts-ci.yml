name: Project Resolve CI
pool:
  vmImage: ubuntu-latest

trigger:
  batch: true
  branches:
    include:
      - main
      - dev

pr:
  branches:
    include:
      - main
      - dev

stages:
  - stage: Compliance
    dependsOn: []
    jobs:
      - job: ComplianceJob
        pool:
          vmImage: windows-latest
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: CredScan@3
            inputs:
              outputFormat: sarif
              debugMode: false
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'
          - task: PublishSecurityAnalysisLogs@3
            inputs:
              ArtifactName: 'CodeAnalysisLogs'
              ArtifactType: 'Container'

  - stage: DeploymentInteg
    displayName: Deploy to Azure (Integ)
    dependsOn: []
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
    jobs:
      - job: IntegDeploymentJob
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: Bash@3
            displayName: Install Dependencies
            inputs:
              targetType: 'inline'
              script: yarn install
            env:
              CI: true

          - task: Bash@3
            displayName: Verify
            inputs:
              targetType: 'inline'
              script: yarn ci
            env:
              CI: true

          - task: Bash@3
            displayName: Build Schema
            inputs:
              targetType: 'inline'
              script: 'yarn prepare:'
            env:
              CI: true

          - task: Bash@3
            displayName: Deploy MS Static Webapp (Integ)
            inputs:
              targetType: 'inline'
              script: yarn build:webapp:ms-integ && yarn deploy:webapp
            env:
              CI: true
              WEBAPP_STORAGE_ACCOUNT: $(WEBAPP_INTEG_STORAGE_ACCOUNT)
              WEBAPP_STORAGE_KEY: $(WEBAPP_INTEG_STORAGE_KEY)

          - task: AzureRmWebAppDeployment@4
            displayName: Deploy MS API (Integ)
            inputs:
              ConnectionType: 'AzureRM'
              appType: 'webAppLinux'
              ConnectedServiceName: 'Resilience - Greenlight'
              WebAppName: 'greenlight-api-integ'
              packageForLinux: '$(System.DefaultWorkingDirectory)/packages/api/deploy.zip'

  - stage: DeploymentProd
    displayName: Deploy to Azure (Prod)
    dependsOn: []
    condition: and(succeeded(), or(eq(variables['build.sourceBranch'], 'refs/heads/main'), eq(variables['deployToProduction'], true)))
    jobs:
      - job: ProdDeploymentJob
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: Bash@3
            displayName: Install Dependencies
            inputs:
              targetType: 'inline'
              script: yarn install
            env:
              CI: true

          - task: Bash@3
            displayName: Verify
            inputs:
              targetType: 'inline'
              script: yarn ci
            env:
              CI: true

          - task: Bash@3
            displayName: Build Schema
            inputs:
              targetType: 'inline'
              script: 'yarn prepare:'
            env:
              CI: true

          - task: Bash@3
            displayName: Deploy MS Static Webapp (Prod)
            inputs:
              targetType: 'inline'
              script: yarn build:webapp:ms-prod && yarn deploy:webapp
            env:
              CI: true
              WEBAPP_STORAGE_ACCOUNT: $(WEBAPP_PROD_STORAGE_ACCOUNT)
              WEBAPP_STORAGE_KEY: $(WEBAPP_PROD_STORAGE_KEY)

          - task: AzureRmWebAppDeployment@4
            displayName: Deploy MS API (Prod)
            inputs:
              ConnectionType: 'AzureRM'
              appType: 'webAppLinux'
              ConnectedServiceName: 'Resilience - Greenlight'
              WebAppName: 'greenlight-api'
              packageForLinux: '$(System.DefaultWorkingDirectory)/packages/api/deploy.zip'
