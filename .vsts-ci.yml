name: Project Resolve CI
pool:
  vmImage: ubuntu-latest

trigger:
  batch: true
  branches:
    include:
      - main
      - release

pr:
  branches:
    include:
      - main
      - release
      - release/*

stages:
  - stage: Compliance
    dependsOn: []
    jobs:
      - job: ComplianceJob
        pool:
          vmImage: windows-latest
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: CredScan@3
            inputs:
              outputFormat: sarif
              debugMode: false
          - task: ComponentGovernanceComponentDetection@0
            inputs:
              scanType: 'Register'
              verbosity: 'Verbose'
              alertWarningLevel: 'High'
          - task: PublishSecurityAnalysisLogs@3
            inputs:
              ArtifactName: 'CodeAnalysisLogs'
              ArtifactType: 'Container'

  - stage: CodeQL
    dependsOn: []
    jobs:
      - job: CodeQLJob
        pool:
          vmImage: windows-latest
        variables:
          'LGTM.UploadSnapshot': true
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: echo "ACCESSTOKEN IS $SYSTEM_ACCESSTOKEN"
            env:
              'SYSTEM_ACCESSTOKEN': $(system.accesstoken)

          - task: Semmle@1
            env:
              'SYSTEM_ACCESSTOKEN': $(system.accesstoken)
            inputs:
              sourceCodeDirectory: '$(Build.SourcesDirectory)/packages'
              language: 'tsandjs'
              includeNodeModules: false
              querySuite: 'Recommended'
              timeout: '1800'
              ram: '16384'
              addProjectDirToScanningExclusionList: true

  - stage: Verification
    dependsOn: []
    jobs:
      - job: VerificationJob
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 2

          # Install Tooling
          - task: NodeTool@0
            displayName: Install Node
            inputs:
              versionSpec: '14.x'

          # Install Dependencies
          - task: Bash@3
            displayName: Install Dependencies
            inputs:
              targetType: 'inline'
              script: yarn install
            env:
              CI: true

          # Verify Packages
          - task: Bash@3
            displayName: Verify Packages
            inputs:
              targetType: 'inline'
              script: yarn ci
            env:
              CI: true

  - stage: DeploymentInteg
    displayName: Deploy to Azure (Integ)
    dependsOn:
      - Compliance
      - Verification
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
    jobs:
      - job: ApiDeploymentJob
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: Bash@3
            displayName: Install Dependencies
            inputs:
              targetType: 'inline'
              script: yarn install
            env:
              CI: true

          - task: Bash@3
            displayName: Build Schema
            inputs:
              targetType: 'inline'
              script: yarn prepare:integ
            env:
              CI: true

          - task: AzureRmWebAppDeployment@4
            displayName: Deploy API (Integ)
            inputs:
              ConnectionType: 'AzureRM'
              appType: 'webAppLinux'
              ConnectedServiceName: 'Resilience - Greenlight'
              WebAppName: 'greenlight-api-integ'
              packageForLinux: '$(System.DefaultWorkingDirectory)/packages/api/deploy.zip'

          - task: AzureRmWebAppDeployment@4
            displayName: Deploy Webapp (Integ)
            inputs:
              ConnectionType: 'AzureRM'
              appType: 'webAppLinux'
              ConnectedServiceName: 'Resilience - Greenlight'
              WebAppName: 'greenlight-app-integ'
              packageForLinux: '$(System.DefaultWorkingDirectory)/packages/webapp/deploy.zip'

  - stage: DeploymentProd
    displayName: Deploy to Azure (Prod)
    dependsOn:
      - Compliance
      - Verification
    condition: and(succeeded(), or(eq(variables['build.sourceBranch'], 'refs/heads/release'), eq(variables['deployToProduction'], true)))
    jobs:
      - job: ApiDeploymentJob
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

          - task: Bash@3
            displayName: Install Dependencies
            inputs:
              targetType: 'inline'
              script: yarn install
            env:
              CI: true

          - task: Bash@3
            displayName: Build Schema
            inputs:
              targetType: 'inline'
              script: yarn prepare:prod
            env:
              CI: true

          - task: AzureRmWebAppDeployment@4
            displayName: Deploy API (Prod)
            inputs:
              ConnectionType: 'AzureRM'
              appType: 'webAppLinux'
              ConnectedServiceName: 'Resilience - Greenlight'
              WebAppName: 'greenlight-api'
              packageForLinux: '$(System.DefaultWorkingDirectory)/packages/api/deploy.zip'

          - task: AzureRmWebAppDeployment@4
            displayName: Deploy Webapp (Prod)
            inputs:
              ConnectionType: 'AzureRM'
              appType: 'webAppLinux'
              ConnectedServiceName: 'Resilience - Greenlight'
              WebAppName: 'greenlight-app'
              packageForLinux: '$(System.DefaultWorkingDirectory)/packages/webapp/deploy.zip'
